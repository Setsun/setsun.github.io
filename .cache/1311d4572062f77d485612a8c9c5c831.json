{
  "dependencies": [
    { "name": "./lib/SPE.js", "loc": { "line": 7, "column": 18 } }
  ],
  "generated": {
    "js":
      "/**\n * Particles component for A-Frame.\n *\n * ShaderParticleEngine by Squarefeet (https://github.com/squarefeet).\n */\n\nvar SPE = require('./lib/SPE.js');\n\nif (typeof AFRAME === 'undefined') {\n  throw new Error('Component attempted to register before AFRAME was available.');\n}\n\nAFRAME.registerComponent('particle-system', {\n\n    schema: {\n        preset: {\n            type: 'string',\n            default: '',\n            oneOf: ['default', 'dust', 'snow', 'rain']\n        },\n        maxAge: {\n            type: 'number'\n        },\n        positionSpread: {\n            type: 'vec3'\n        },\n        type: {\n            type: 'number'\n        },\n        rotationAxis: {\n            type: 'string'\n        },\n        rotationAngle: {\n            type: 'number'\n        },\n        accelerationValue: {\n            type: 'vec3'\n        },\n        accelerationSpread: {\n            type: 'vec3'\n        },\n        velocityValue: {\n            type: 'vec3'\n        },\n        velocitySpread: {\n            type: 'vec3'\n        },\n        color: {\n            type: 'array'\n        },\n        size: {\n            type: 'number'\n        },\n        direction: {\n            type: 'number'\n        },\n        duration: {\n            type: 'number'\n        },\n        particleCount: {\n            type: 'number'\n        },\n        texture: {\n            type: 'asset'\n        },\n        randomize: {\n            type: 'boolean'\n        },\n        opacity: {\n          type: 'number',\n        },\n        maxParticleCount: {\n            type: 'number',\n            default: 250000\n        },\n        blending: {\n            type: 'number',\n            default: THREE.AdditiveBlending,\n            oneOf: [THREE.NoBlending,THREE.NormalBlending,THREE.AdditiveBlending,THREE.SubtractiveBlending,THREE.MultiplyBlending]\n        },\n        enabled: {\n            type:'boolean',\n            default:true\n        }\n    },\n\n\n    init: function() {\n\n        this.presets = [];\n\n        /* preset settings can be overwritten */\n\n        this.presets['default'] = {\n            maxAge: (this.data.maxAge!==0?this.data.maxAge:6),\n            positionSpread: (this.data.positionSpread.x!==0||this.data.positionSpread.y!==0||this.data.positionSpread.z!==0?this.data.positionSpread:{x:0,y:0,z:0}),\n            type: (this.data.type!==0?this.data.type:SPE.distributions.BOX), /* SPE.distributions.SPHERE, SPE.distributions.DISC */\n            rotationAxis: (this.data.rotationAxis!==''?this.data.rotationAxis:'x'),\n            rotationAngle: (this.data.rotationAngle!==0?this.data.rotationAngle:0),\n            accelerationValue: (this.data.accelerationValue.x!==0||this.data.accelerationValue.y!==0||this.data.accelerationValue.z!==0?this.data.accelerationValue:{x: 0, y: -10, z: 0}),\n            accelerationSpread: (this.data.accelerationSpread.x!==0||this.data.accelerationSpread.y!==0||this.data.accelerationSpread.z!==0?this.data.accelerationSpread:{x: 10, y: 0, z: 10}),\n            velocityValue: (this.data.velocityValue.x!==0||this.data.velocityValue.y!==0||this.data.velocityValue.z!==0?this.data.velocityValue:{x: 0, y: 25, z: 0}),\n            velocitySpread: (this.data.velocitySpread.x!==0||this.data.velocitySpread.y!==0||this.data.velocitySpread.z!==0?this.data.velocitySpread:{x: 10, y: 7.5, z: 10}),\n            color: (this.data.color.length?this.data.color:['#0000FF','#FF0000']),\n            size: (this.data.size!==0?this.data.size:1),\n            opacity: { value: (this.data.opacity!=0?this.data.opacity:1) },\n            direction: (this.data.direction!==0?this.data.direction:1),\n            duration: (this.data.duration!=0?this.data.duration:null),\n            particleCount: (this.data.particleCount!==0?this.data.particleCount:1000),\n            texture: (this.data.texture!==''?this.data.texture:'https://cdn.rawgit.com/IdeaSpaceVR/aframe-particle-system-component/master/dist/images/star2.png'),\n            randomize: false\n        };\n\n\n        this.presets['dust'] = {\n            maxAge: (this.data.maxAge!==0?this.data.maxAge:20),\n            positionSpread: (this.data.positionSpread.x!==0||this.data.positionSpread.y!==0||this.data.positionSpread.z!==0?this.data.positionSpread:{x:100,y:100,z:100}),\n            type: (this.data.type!==0?this.data.type:SPE.distributions.BOX), /* SPE.distributions.SPHERE, SPE.distributions.DISC */\n            rotationAxis: (this.data.rotationAxis!==''?this.data.rotationAxis:'x'),\n            rotationAngle: (this.data.rotationAngle!==0?this.data.rotationAngle:3.14),\n            accelerationValue: (this.data.accelerationValue.x!==0||this.data.accelerationValue.y!==0||this.data.accelerationValue.z!==0?this.data.accelerationValue:{x: 0, y: 0, z: 0}),\n            accelerationSpread: (this.data.accelerationSpread.x!==0||this.data.accelerationSpread.y!==0||this.data.accelerationSpread.z!==0?this.data.accelerationSpread:{x: 0, y: 0, z: 0}),\n            velocityValue: (this.data.velocityValue.x!==0||this.data.velocityValue.y!==0||this.data.velocityValue.z!==0?this.data.velocityValue:{x: 1, y: 0.3, z: 1}),\n            velocitySpread: (this.data.velocitySpread.x!==0||this.data.velocitySpread.y!==0||this.data.velocitySpread.z!==0?this.data.velocitySpread:{x: 0.5, y: 1, z: 0.5}),\n            color: (this.data.color.length?this.data.color:['#FFFFFF']),\n            size: (this.data.size!==0?this.data.size:1),\n            opacity: { value: (this.data.opacity!=0?this.data.opacity:1) },\n            direction: (this.data.direction!==0?this.data.direction:1),\n            duration: (this.data.duration!=0?this.data.duration:null),\n            particleCount: (this.data.particleCount!==0?this.data.particleCount:100),\n            texture: (this.data.texture!==''?this.data.texture:'https://cdn.rawgit.com/IdeaSpaceVR/aframe-particle-system-component/master/dist/images/smokeparticle.png'),\n            randomize: false\n        };\n\n\n        this.presets['snow'] = {\n            maxAge: (this.data.maxAge!==0?this.data.maxAge:20),\n            positionSpread: (this.data.positionSpread.x!==0||this.data.positionSpread.y!==0||this.data.positionSpread.z!==0?this.data.positionSpread:{x:100,y:100,z:100}),\n            type: (this.data.type!==0?this.data.type:SPE.distributions.BOX), /* SPE.distributions.SPHERE, SPE.distributions.DISC */\n            rotationAxis: (this.data.rotationAxis!==''?this.data.rotationAxis:'x'),\n            rotationAngle: (this.data.rotationAngle!==0?this.data.rotationAngle:3.14),\n            accelerationValue: (this.data.accelerationValue.x!==0||this.data.accelerationValue.y!==0||this.data.accelerationValue.z!==0?this.data.accelerationValue:{x: 0, y: 0, z: 0}),\n            accelerationSpread: (this.data.accelerationSpread.x!==0||this.data.accelerationSpread.y!==0||this.data.accelerationSpread.z!==0?this.data.accelerationSpread:{x: 0.2, y: 0, z: 0.2}),\n            velocityValue: (this.data.velocityValue.x!==0||this.data.velocityValue.y!==0||this.data.velocityValue.z!==0?this.data.velocityValue:{x: 0, y: 8, z: 0}),\n            velocitySpread: (this.data.velocitySpread.x!==0||this.data.velocitySpread.y!==0||this.data.velocitySpread.z!==0?this.data.velocitySpread:{x: 2, y: 0, z: 2}),\n            color: (this.data.color.length?this.data.color:['#FFFFFF']),\n            size: (this.data.size!==0?this.data.size:1),\n            opacity: { value: (this.data.opacity!=0?this.data.opacity:1) },\n            direction: (this.data.direction!==0?this.data.direction:1),\n            duration: (this.data.duration!=0?this.data.duration:null),\n            particleCount: (this.data.particleCount!==0?this.data.particleCount:200),\n            texture: (this.data.texture!==''?this.data.texture:'https://cdn.rawgit.com/IdeaSpaceVR/aframe-particle-system-component/master/dist/images/smokeparticle.png'),\n            randomize: false\n        };\n\n\n        this.presets['rain'] = {\n            maxAge: (this.data.maxAge!==0?this.data.maxAge:1),\n            positionSpread: (this.data.positionSpread.x!==0||this.data.positionSpread.y!==0||this.data.positionSpread.z!==0?this.data.positionSpread:{x:100,y:100,z:100}),\n            type: (this.data.type!==0?this.data.type:SPE.distributions.BOX), /* SPE.distributions.SPHERE, SPE.distributions.DISC */\n            rotationAxis: (this.data.rotationAxis!==''?this.data.rotationAxis:'x'),\n            rotationAngle: (this.data.rotationAngle!==0?this.data.rotationAngle:3.14),\n            accelerationValue: (this.data.accelerationValue.x!==0||this.data.accelerationValue.y!==0||this.data.accelerationValue.z!==0?this.data.accelerationValue:{x: 0, y: 3, z: 0}),\n            accelerationSpread: (this.data.accelerationSpread.x!==0||this.data.accelerationSpread.y!==0||this.data.accelerationSpread.z!==0?this.data.accelerationSpread:{x: 2, y: 1, z: 2}),\n            velocityValue: (this.data.velocityValue.x!==0||this.data.velocityValue.y!==0||this.data.velocityValue.z!==0?this.data.velocityValue:{x: 0, y: 75, z: 0}),\n            velocitySpread: (this.data.velocitySpread.x!==0||this.data.velocitySpread.y!==0||this.data.velocitySpread.z!==0?this.data.velocitySpread:{x: 10, y: 50, z: 10}),\n            color: (this.data.color.length?this.data.color:['#FFFFFF']),\n            size: (this.data.size!==0?this.data.size:0.4),\n            opacity: { value: (this.data.opacity!=0?this.data.opacity:1) },\n            direction: (this.data.direction!==0?this.data.direction:1),\n            duration: (this.data.duration!=0?this.data.duration:null),\n            particleCount: (this.data.particleCount!==0?this.data.particleCount:1000),\n            texture: (this.data.texture!==''?this.data.texture:'https://cdn.rawgit.com/IdeaSpaceVR/aframe-particle-system-component/master/dist/images/raindrop.png'),\n            randomize: false\n        };\n\n\n    },\n\n\n    update: function (oldData) {\n\n        // Remove old particle group.\n        if (this.particleGroup) {\n            this.el.removeObject3D('particle-system');\n        }\n\n        if (this.data.preset != '' && this.data.preset in this.presets) {\n\n            this.initParticleSystem(this.presets[this.data.preset]);\n\n        } else {\n\n            this.initParticleSystem(this.presets['default']);\n        }\n\n        if(this.data.enabled === true) {\n            this.startParticles()\n        } else {\n            this.stopParticles()\n        }\n    },\n\n\n    tick: function(time, dt) {\n\n        this.particleGroup.tick(dt / 1000);\n    },\n\n\n    remove: function() {\n\n        // Remove particle system.\n        if (!this.particleGroup) { return; }\n        this.el.removeObject3D('particle-system');\n    },\n\n    startParticles: function() {\n        this.particleGroup.emitters.forEach(function(em) { em.enable() });\n    },\n\n    stopParticles: function() {\n        this.particleGroup.emitters.forEach(function(em) { em.disable() });\n    },\n\n\n    initParticleSystem: function(settings) {\n\n        var loader = new THREE.TextureLoader();\n        var particle_texture = loader.load(\n            settings.texture,\n            function (texture) {\n                return texture;\n            },\n            function (xhr) {\n              console.log((xhr.loaded / xhr.total * 100) + '% loaded');\n            },\n            function (xhr) {\n              console.log('An error occurred');\n            }\n        );\n\n        this.particleGroup = new SPE.Group({\n            texture: {\n                value: particle_texture\n            },\n            maxParticleCount: this.data.maxParticleCount,\n            blending: this.data.blending\n        });\n\n        var emitter = new SPE.Emitter({\n            maxAge: {\n                value: settings.maxAge\n            },\n            type: {\n                value: settings.type\n            },\n            position: {\n                spread: new THREE.Vector3(settings.positionSpread.x, settings.positionSpread.y, settings.positionSpread.z),\n                randomize: settings.randomize\n                //spreadClamp: new THREE.Vector3( 2, 2, 2 ),\n                //radius: 4\n            },\n            rotation: {\n                axis: (settings.rotationAxis=='x'?new THREE.Vector3(1, 0, 0):(settings.rotationAxis=='y'?new THREE.Vector3(0, 1, 0):(settings.rotationAxis=='z'?new THREE.Vector3(0, 0, 1):new THREE.Vector3(0, 1, 0)))),\n                angle: settings.rotationAngle,\n                static: true\n            },\n            acceleration: {\n                value: new THREE.Vector3(settings.accelerationValue.x, settings.accelerationValue.y, settings.accelerationValue.z),\n                spread: new THREE.Vector3(settings.accelerationSpread.x, settings.accelerationSpread.y, settings.accelerationSpread.z)\n            },\n            velocity: {\n                value: new THREE.Vector3(settings.velocityValue.x, settings.velocityValue.y, settings.velocityValue.z),\n                spread: new THREE.Vector3(settings.velocitySpread.x, settings.velocitySpread.y, settings.velocitySpread.z)\n            },\n            color: {\n                value: settings.color.map(function(c) { return new THREE.Color(c); })\n            },\n            size: {\n                value: settings.size\n            },\n            /*wiggle: { value: 4, spread: 2 }, //settings.wiggle,*/\n            /*drag: {\n                value: settings.drag\n            },*/\n            direction: {\n                value: settings.direction\n            },\n            duration: settings.duration,\n            opacity: settings.opacity,\n            particleCount: settings.particleCount\n        });\n\n        this.particleGroup.addEmitter(emitter);\n        this.particleGroup.mesh.frustumCulled = false;\n        this.el.setObject3D('particle-system', this.particleGroup.mesh);\n    }\n});\n"
  },
  "hash": "88124cf33c7a4496789941c24f602a12"
}
