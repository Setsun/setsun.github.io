{"remainingRequest":"/Users/seanluo/@setsun/setsun.github.io/node_modules/thread-loader/dist/cjs.js??ref--4-1!/Users/seanluo/@setsun/setsun.github.io/node_modules/babel-loader/lib/index.js!/Users/seanluo/@setsun/setsun.github.io/src/routes/Sketches/AbstractSphere/index.tsx","dependencies":[{"path":"/Users/seanluo/@setsun/setsun.github.io/src/routes/Sketches/AbstractSphere/index.tsx","mtime":1562401241085},{"path":"/Users/seanluo/@setsun/setsun.github.io/.babelrc","mtime":1559266060084},{"path":"/Users/seanluo/@setsun/setsun.github.io/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/seanluo/@setsun/setsun.github.io/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/seanluo/@setsun/setsun.github.io/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHsKICBpZiAodHlwZW9mIGRlZmluZSA9PT0gImZ1bmN0aW9uIiAmJiBkZWZpbmUuYW1kKSB7CiAgICBkZWZpbmUoWyJleHBvcnRzIiwgIi9Vc2Vycy9zZWFubHVvL0BzZXRzdW4vc2V0c3VuLmdpdGh1Yi5pby9ub2RlX21vZHVsZXMvYmFiZWwtcHJlc2V0LXJlYWN0LWFwcC9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vdG9Db25zdW1hYmxlQXJyYXkiLCAicmVhY3QiLCAicmVhY3Qtc3ByaW5nL3RocmVlIiwgInJlYWN0LXRocmVlLWZpYmVyIl0sIGZhY3RvcnkpOwogIH0gZWxzZSBpZiAodHlwZW9mIGV4cG9ydHMgIT09ICJ1bmRlZmluZWQiKSB7CiAgICBmYWN0b3J5KGV4cG9ydHMsIHJlcXVpcmUoIi9Vc2Vycy9zZWFubHVvL0BzZXRzdW4vc2V0c3VuLmdpdGh1Yi5pby9ub2RlX21vZHVsZXMvYmFiZWwtcHJlc2V0LXJlYWN0LWFwcC9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vdG9Db25zdW1hYmxlQXJyYXkiKSwgcmVxdWlyZSgicmVhY3QiKSwgcmVxdWlyZSgicmVhY3Qtc3ByaW5nL3RocmVlIiksIHJlcXVpcmUoInJlYWN0LXRocmVlLWZpYmVyIikpOwogIH0gZWxzZSB7CiAgICB2YXIgbW9kID0gewogICAgICBleHBvcnRzOiB7fQogICAgfTsKICAgIGZhY3RvcnkobW9kLmV4cG9ydHMsIGdsb2JhbC50b0NvbnN1bWFibGVBcnJheSwgZ2xvYmFsLnJlYWN0LCBnbG9iYWwudGhyZWUsIGdsb2JhbC5yZWFjdFRocmVlRmliZXIpOwogICAgZ2xvYmFsLmluZGV4ID0gbW9kLmV4cG9ydHM7CiAgfQp9KSh0aGlzLCBmdW5jdGlvbiAoX2V4cG9ydHMsIF90b0NvbnN1bWFibGVBcnJheTIsIF9yZWFjdCwgX3RocmVlLCBfcmVhY3RUaHJlZUZpYmVyKSB7CiAgInVzZSBzdHJpY3QiOwoKICB2YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoIi9Vc2Vycy9zZWFubHVvL0BzZXRzdW4vc2V0c3VuLmdpdGh1Yi5pby9ub2RlX21vZHVsZXMvYmFiZWwtcHJlc2V0LXJlYWN0LWFwcC9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHQiKTsKCiAgdmFyIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkID0gcmVxdWlyZSgiL1VzZXJzL3NlYW5sdW8vQHNldHN1bi9zZXRzdW4uZ2l0aHViLmlvL25vZGVfbW9kdWxlcy9iYWJlbC1wcmVzZXQtcmVhY3QtYXBwL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlV2lsZGNhcmQiKTsKCiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KF9leHBvcnRzLCAiX19lc01vZHVsZSIsIHsKICAgIHZhbHVlOiB0cnVlCiAgfSk7CiAgX2V4cG9ydHNbImRlZmF1bHQiXSA9IHZvaWQgMDsKICBfdG9Db25zdW1hYmxlQXJyYXkyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfdG9Db25zdW1hYmxlQXJyYXkyKTsKICBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChfcmVhY3QpOwogIHZhciBfanN4RmlsZU5hbWUgPSAiL1VzZXJzL3NlYW5sdW8vQHNldHN1bi9zZXRzdW4uZ2l0aHViLmlvL3NyYy9yb3V0ZXMvU2tldGNoZXMvQWJzdHJhY3RTcGhlcmUvaW5kZXgudHN4IjsKCiAgKGZ1bmN0aW9uICgpIHsKICAgIHZhciBlbnRlck1vZHVsZSA9IHR5cGVvZiByZWFjdEhvdExvYWRlckdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcgPyByZWFjdEhvdExvYWRlckdsb2JhbC5lbnRlck1vZHVsZSA6IHVuZGVmaW5lZDsKICAgIGVudGVyTW9kdWxlICYmIGVudGVyTW9kdWxlKG1vZHVsZSk7CiAgfSkoKTsKCiAgdmFyIF9fc2lnbmF0dXJlX18gPSB0eXBlb2YgcmVhY3RIb3RMb2FkZXJHbG9iYWwgIT09ICd1bmRlZmluZWQnID8gcmVhY3RIb3RMb2FkZXJHbG9iYWxbImRlZmF1bHQiXS5zaWduYXR1cmUgOiBmdW5jdGlvbiAoYSkgewogICAgcmV0dXJuIGE7CiAgfTsKCiAgdmFyIENpcmNsZVB1bHNlID0gZnVuY3Rpb24gQ2lyY2xlUHVsc2UoX3JlZikgewogICAgdmFyIHBvc2l0aW9uID0gX3JlZi5wb3NpdGlvbiwKICAgICAgICB0aGV0YSA9IF9yZWYudGhldGE7CiAgICB2YXIgcmVmID0gKDAsIF9yZWFjdC51c2VSZWYpKCk7CiAgICAoMCwgX3JlYWN0VGhyZWVGaWJlci51c2VSZW5kZXIpKGZ1bmN0aW9uICgpIHsKICAgICAgdGhldGEgKz0gMC4wNTsKICAgICAgdmFyIHNjYWxlID0gTWF0aC5jb3ModGhldGEpOwogICAgICB2YXIgZ2VvbWV0cnkgPSByZWYuY3VycmVudDsKICAgICAgZ2VvbWV0cnkuc2NhbGUuc2V0KHNjYWxlLCBzY2FsZSwgc2NhbGUpOwogICAgfSk7CiAgICByZXR1cm4gX3JlYWN0WyJkZWZhdWx0Il0uY3JlYXRlRWxlbWVudChfdGhyZWUuYS5tZXNoLCB7CiAgICAgIHJlZjogcmVmLAogICAgICBwb3NpdGlvbjogcG9zaXRpb24sCiAgICAgIF9fc291cmNlOiB7CiAgICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSwKICAgICAgICBsaW5lTnVtYmVyOiAxOQogICAgICB9LAogICAgICBfX3NlbGY6IHRoaXMKICAgIH0sIF9yZWFjdFsiZGVmYXVsdCJdLmNyZWF0ZUVsZW1lbnQoInJpbmdHZW9tZXRyeSIsIHsKICAgICAgYXR0YWNoOiAiZ2VvbWV0cnkiLAogICAgICBfX3NvdXJjZTogewogICAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsCiAgICAgICAgbGluZU51bWJlcjogMjAKICAgICAgfSwKICAgICAgX19zZWxmOiB0aGlzCiAgICB9KSwgX3JlYWN0WyJkZWZhdWx0Il0uY3JlYXRlRWxlbWVudCgibWVzaFN0YW5kYXJkTWF0ZXJpYWwiLCB7CiAgICAgIGF0dGFjaDogIm1hdGVyaWFsIiwKICAgICAgY29sb3I6ICJ3aGl0ZSIsCiAgICAgIHRyYW5zcGFyZW50OiB0cnVlLAogICAgICBfX3NvdXJjZTogewogICAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsCiAgICAgICAgbGluZU51bWJlcjogMjEKICAgICAgfSwKICAgICAgX19zZWxmOiB0aGlzCiAgICB9KSk7CiAgfTsKCiAgX19zaWduYXR1cmVfXyhDaXJjbGVQdWxzZSwgInVzZVJlZntyZWZ9XG51c2VSZW5kZXJ7fSIsIGZ1bmN0aW9uICgpIHsKICAgIHJldHVybiBbX3JlYWN0VGhyZWVGaWJlci51c2VSZW5kZXJdOwogIH0pOwoKICBDaXJjbGVQdWxzZS5kZWZhdWx0UHJvcHMgPSB7CiAgICBwb3NpdGlvbjogWzAsIDAsIDBdLAogICAgdGhldGE6IDAKICB9OwoKICB2YXIgQWJzdHJhY3RTcGhlcmUgPSBmdW5jdGlvbiBBYnN0cmFjdFNwaGVyZSgpIHsKICAgIHJldHVybiBfcmVhY3RbImRlZmF1bHQiXS5jcmVhdGVFbGVtZW50KF9yZWFjdFRocmVlRmliZXIuQ2FudmFzLCB7CiAgICAgIHN0eWxlOiB7CiAgICAgICAgYmFja2dyb3VuZDogJ2JsYWNrJwogICAgICB9LAogICAgICBfX3NvdXJjZTogewogICAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsCiAgICAgICAgbGluZU51bWJlcjogMzMKICAgICAgfSwKICAgICAgX19zZWxmOiB0aGlzCiAgICB9LCBfcmVhY3RbImRlZmF1bHQiXS5jcmVhdGVFbGVtZW50KCJhbWJpZW50TGlnaHQiLCB7CiAgICAgIGNvbG9yOiAid2hpdGUiLAogICAgICBfX3NvdXJjZTogewogICAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsCiAgICAgICAgbGluZU51bWJlcjogMzQKICAgICAgfSwKICAgICAgX19zZWxmOiB0aGlzCiAgICB9KSwgX3JlYWN0WyJkZWZhdWx0Il0uY3JlYXRlRWxlbWVudCgicG9pbnRMaWdodCIsIHsKICAgICAgY29sb3I6ICJ3aGl0ZSIsCiAgICAgIGludGVuc2l0eTogMSwKICAgICAgcG9zaXRpb246IFsxMCwgMTAsIDEwXSwKICAgICAgX19zb3VyY2U6IHsKICAgICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICAgIGxpbmVOdW1iZXI6IDM1CiAgICAgIH0sCiAgICAgIF9fc2VsZjogdGhpcwogICAgfSksIF9yZWFjdFsiZGVmYXVsdCJdLmNyZWF0ZUVsZW1lbnQoX3RocmVlLmEubWVzaCwgewogICAgICBfX3NvdXJjZTogewogICAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsCiAgICAgICAgbGluZU51bWJlcjogMzcKICAgICAgfSwKICAgICAgX19zZWxmOiB0aGlzCiAgICB9LCAoMCwgX3RvQ29uc3VtYWJsZUFycmF5MlsiZGVmYXVsdCJdKShuZXcgQXJyYXkoOCkpLm1hcChmdW5jdGlvbiAoXywgaSkgewogICAgICByZXR1cm4gX3JlYWN0WyJkZWZhdWx0Il0uY3JlYXRlRWxlbWVudChDaXJjbGVQdWxzZSwgewogICAgICAgIHBvc2l0aW9uOiBbMCwgMC4yNSAqIGksIDBdLAogICAgICAgIHRoZXRhOiAwLjI1ICogaSwKICAgICAgICBrZXk6IGksCiAgICAgICAgX19zb3VyY2U6IHsKICAgICAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsCiAgICAgICAgICBsaW5lTnVtYmVyOiAzOQogICAgICAgIH0sCiAgICAgICAgX19zZWxmOiB0aGlzCiAgICAgIH0pOwogICAgfSkpKTsKICB9OwoKICB2YXIgX2RlZmF1bHQgPSBBYnN0cmFjdFNwaGVyZTsKICB2YXIgX2RlZmF1bHQyID0gX2RlZmF1bHQ7CiAgX2V4cG9ydHNbImRlZmF1bHQiXSA9IF9kZWZhdWx0MjsKICA7CgogIChmdW5jdGlvbiAoKSB7CiAgICB2YXIgcmVhY3RIb3RMb2FkZXIgPSB0eXBlb2YgcmVhY3RIb3RMb2FkZXJHbG9iYWwgIT09ICd1bmRlZmluZWQnID8gcmVhY3RIb3RMb2FkZXJHbG9iYWxbImRlZmF1bHQiXSA6IHVuZGVmaW5lZDsKCiAgICBpZiAoIXJlYWN0SG90TG9hZGVyKSB7CiAgICAgIHJldHVybjsKICAgIH0KCiAgICByZWFjdEhvdExvYWRlci5yZWdpc3RlcihDaXJjbGVQdWxzZSwgIkNpcmNsZVB1bHNlIiwgIi9Vc2Vycy9zZWFubHVvL0BzZXRzdW4vc2V0c3VuLmdpdGh1Yi5pby9zcmMvcm91dGVzL1NrZXRjaGVzL0Fic3RyYWN0U3BoZXJlL2luZGV4LnRzeCIpOwogICAgcmVhY3RIb3RMb2FkZXIucmVnaXN0ZXIoQWJzdHJhY3RTcGhlcmUsICJBYnN0cmFjdFNwaGVyZSIsICIvVXNlcnMvc2Vhbmx1by9Ac2V0c3VuL3NldHN1bi5naXRodWIuaW8vc3JjL3JvdXRlcy9Ta2V0Y2hlcy9BYnN0cmFjdFNwaGVyZS9pbmRleC50c3giKTsKICAgIHJlYWN0SG90TG9hZGVyLnJlZ2lzdGVyKF9kZWZhdWx0LCAiZGVmYXVsdCIsICIvVXNlcnMvc2Vhbmx1by9Ac2V0c3VuL3NldHN1bi5naXRodWIuaW8vc3JjL3JvdXRlcy9Ta2V0Y2hlcy9BYnN0cmFjdFNwaGVyZS9pbmRleC50c3giKTsKICB9KSgpOwoKICA7CgogIChmdW5jdGlvbiAoKSB7CiAgICB2YXIgbGVhdmVNb2R1bGUgPSB0eXBlb2YgcmVhY3RIb3RMb2FkZXJHbG9iYWwgIT09ICd1bmRlZmluZWQnID8gcmVhY3RIb3RMb2FkZXJHbG9iYWwubGVhdmVNb2R1bGUgOiB1bmRlZmluZWQ7CiAgICBsZWF2ZU1vZHVsZSAmJiBsZWF2ZU1vZHVsZShtb2R1bGUpOwogIH0pKCk7Cn0pOw=="},{"version":3,"sources":["/Users/seanluo/@setsun/setsun.github.io/src/routes/Sketches/AbstractSphere/index.tsx"],"names":["CirclePulse","position","theta","ref","scale","Math","cos","geometry","current","set","useRender","defaultProps","AbstractSphere","background","Array","map","_","i"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAKA,MAAMA,WAAW,GAAG,SAAdA,WAAc,OAAyB;AAAA,QAAtBC,QAAsB,QAAtBA,QAAsB;AAAA,QAAZC,KAAY,QAAZA,KAAY;AAC3C,QAAMC,GAAG,GAAG,oBAAZ;AAEA,oCAAU,YAAM;AACdD,MAAAA,KAAK,IAAI,IAAT;AAEA,UAAME,KAAK,GAAGC,IAAI,CAACC,GAAL,CAASJ,KAAT,CAAd;AACA,UAAMK,QAAQ,GAAGJ,GAAG,CAACK,OAArB;AAEAD,MAAAA,QAAQ,CAACH,KAAT,CAAeK,GAAf,CAAmBL,KAAnB,EAA0BA,KAA1B,EAAiCA,KAAjC;AACD,KAPD;AASA,WACE,gCAAC,QAAD,CAAG,IAAH;AAAQ,MAAA,GAAG,EAAED,GAAb;AAAkB,MAAA,QAAQ,EAAEF,QAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAc,MAAA,MAAM,EAAC,UAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAEE;AAAsB,MAAA,MAAM,EAAC,UAA7B;AAAwC,MAAA,KAAK,EAAC,OAA9C;AAAsD,MAAA,WAAW,MAAjE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,CADF;AAMD,GAlBD;;gBAAMD,W;YAGJU,0B;;;AAiBFV,EAAAA,WAAW,CAACW,YAAZ,GAA2B;AACzBV,IAAAA,QAAQ,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CADe;AAEzBC,IAAAA,KAAK,EAAE;AAFkB,GAA3B;;AAKA,MAAMU,cAAc,GAAG,SAAjBA,cAAiB,GAAM;AAC3B,WACE,gCAAC,uBAAD;AAAQ,MAAA,KAAK,EAAE;AAAEC,QAAAA,UAAU,EAAE;AAAd,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAc,MAAA,KAAK,EAAC,OAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAEE;AAAY,MAAA,KAAK,EAAC,OAAlB;AAA0B,MAAA,SAAS,EAAE,CAArC;AAAwC,MAAA,QAAQ,EAAE,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,CAAlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,EAIE,gCAAC,QAAD,CAAG,IAAH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,oCAAI,IAAIC,KAAJ,CAAU,CAAV,CAAJ,EAAkBC,GAAlB,CAAsB,UAACC,CAAD,EAAIC,CAAJ;AAAA,aACrB,gCAAC,WAAD;AAAa,QAAA,QAAQ,EAAE,CAAC,CAAD,EAAI,OAAOA,CAAX,EAAc,CAAd,CAAvB;AAAyC,QAAA,KAAK,EAAE,OAAOA,CAAvD;AAA0D,QAAA,GAAG,EAAEA,CAA/D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADqB;AAAA,KAAtB,CADH,CAJF,CADF;AAYD,GAbD;;iBAeeL,c;;;;;;;;;;;;4BAxCTZ,W;4BAyBAY,c","sourcesContent":["import * as THREE from 'three';\nimport React, { useRef } from 'react';\nimport { a } from 'react-spring/three';\nimport { Canvas, useRender } from 'react-three-fiber';\n\nconst CirclePulse = ({ position, theta }) => {\n  const ref = useRef<THREE.Mesh>();\n\n  useRender(() => {\n    theta += 0.05;\n\n    const scale = Math.cos(theta);\n    const geometry = ref.current;\n\n    geometry.scale.set(scale, scale, scale);\n  });\n\n  return (\n    <a.mesh ref={ref} position={position}>\n      <ringGeometry attach=\"geometry\" />\n      <meshStandardMaterial attach=\"material\" color=\"white\" transparent />\n    </a.mesh>\n  );\n};\n\nCirclePulse.defaultProps = {\n  position: [0, 0, 0],\n  theta: 0,\n};\n\nconst AbstractSphere = () => {\n  return (\n    <Canvas style={{ background: 'black' }}>\n      <ambientLight color=\"white\" />\n      <pointLight color=\"white\" intensity={1} position={[10, 10, 10]} />\n\n      <a.mesh>\n        {[...new Array(8)].map((_, i) => (\n          <CirclePulse position={[0, 0.25 * i, 0]} theta={0.25 * i} key={i} />\n        ))}\n      </a.mesh>\n    </Canvas>\n  );\n};\n\nexport default AbstractSphere;\n"]}]}