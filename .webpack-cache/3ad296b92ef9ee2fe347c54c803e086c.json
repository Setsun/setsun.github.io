{"remainingRequest":"/Users/seanluo/@setsun/setsun.github.io/node_modules/thread-loader/dist/cjs.js??ref--4-1!/Users/seanluo/@setsun/setsun.github.io/node_modules/babel-loader/lib/index.js!/Users/seanluo/@setsun/setsun.github.io/src/routes/Sketches/Stars/index.tsx","dependencies":[{"path":"/Users/seanluo/@setsun/setsun.github.io/src/routes/Sketches/Stars/index.tsx","mtime":1562401381385},{"path":"/Users/seanluo/@setsun/setsun.github.io/.babelrc","mtime":1559266060084},{"path":"/Users/seanluo/@setsun/setsun.github.io/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/seanluo/@setsun/setsun.github.io/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/seanluo/@setsun/setsun.github.io/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/seanluo/@setsun/setsun.github.io/src/routes/Sketches/Stars/index.tsx"],"names":["Polygon","active","setActive","hovered","setHover","color","pos","scale","rotation","THREE","Math","degToRad","config","mass","tension","friction","precision","props","lineVertices","map","v","Vector3","e","useSpring","StarMap","group","theta","r","sin","s","cos","current","set","geo","SphereBufferGeometry","mat","MeshBasicMaterial","Color","coords","Array","_","random","i","p1","p2","p3","useRender","Stars","background"],"mappings":"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","sourcesContent":["import * as THREE from 'three';\nimport React, {\n  useState,\n  useRef,\n  useMemo,\n} from 'react';\nimport { useSpring, a } from 'react-spring/three';\nimport { Canvas, useRender } from 'react-three-fiber';\n\nfunction Polygon() {\n  const [active, setActive] = useState(false);\n  const [hovered, setHover] = useState(false);\n\n  // We can tap into the eco system, this uses react-spring for animation\n  const { color, pos, ...props } = useSpring({\n    color: active ? 'hotpink' : 'white',\n    pos: active ? [0, 0, 2] : [0, 0, 0],\n    'material-opacity': hovered ? 0.6 : 0.25,\n    scale: active ? [1.5, 1.5, 1.5] : [1, 1, 1],\n    rotation: active\n      ? [THREE.Math.degToRad(180), 0, THREE.Math.degToRad(45)]\n      : [0, 0, 0],\n    config: { mass: 10, tension: 1000, friction: 300, precision: 0.00001 },\n  });\n\n  const lineVertices = [\n    [-1, 0, 0],\n    [0, 1, 0],\n    [1, 0, 0],\n    [0, -1, 0],\n    [-1, 0, 0],\n  ];\n\n  return (\n    <group>\n      <a.line position={pos}>\n        <geometry\n          attach=\"geometry\"\n          vertices={lineVertices.map(v => new THREE.Vector3(...v))}\n        />\n        <a.lineBasicMaterial attach=\"material\" color={color} />\n      </a.line>\n      <a.mesh\n        onClick={e => setActive(!active)}\n        onPointerOver={e => setHover(true)}\n        onPointerOut={e => setHover(false)}\n        {...props}\n      >\n        <octahedronGeometry attach=\"geometry\" />\n        <meshStandardMaterial attach=\"material\" color=\"grey\" transparent />\n      </a.mesh>\n    </group>\n  );\n}\n\nfunction StarMap() {\n  const group = useRef<THREE.Mesh>();\n  let theta = 0;\n\n  useRender(() => {\n    // Some things maybe shouldn't be declarative, we're in the render-loop here with full access to the instance\n    const r = 5 * Math.sin(THREE.Math.degToRad((theta += 0.01)));\n    const s = Math.cos(THREE.Math.degToRad(theta * 2));\n    group.current.rotation.set(r, r, r);\n    group.current.scale.set(s, s, s);\n  });\n\n  const [geo, mat, coords] = useMemo(() => {\n    const geo = new THREE.SphereBufferGeometry(1, 10, 10);\n\n    const mat = new THREE.MeshBasicMaterial({\n      color: new THREE.Color('lightpink'),\n    });\n\n    const coords = [...new Array(1000)].map((_) =>\n      [\n        Math.random() * 800 - 400,\n        Math.random() * 800 - 400,\n        Math.random() * 800 - 400,\n      ]\n    );\n\n    return [geo, mat, coords];\n  }, []);\n\n  return (\n    <group ref={group}>\n      {coords.map(([p1, p2, p3], i) => (\n        <mesh key={i} geometry={geo} material={mat} position={[p1, p2, p3]} />\n      ))}\n    </group>\n  );\n}\n\nexport default function Stars() {\n  return (\n    <>\n      <Canvas style={{ background: '#272727' }}>\n        <ambientLight color=\"lightblue\" />\n        <pointLight color=\"white\" intensity={1} position={[10, 10, 10]} />\n        <Polygon />\n        <StarMap />\n      </Canvas>\n    </>\n  );\n}\n"]}]}